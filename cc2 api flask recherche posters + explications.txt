
Python

from flask import Flask, request, jsonify
from pymongo import MongoClient
from bson.objectid import ObjectId
import numpy as np
# Autres imports nécessaires (par exemple, pour le traitement des images et la comparaison des embeddings)
# Exemple :
# from PIL import Image
# from io import BytesIO
# from sklearn.metrics.pairwise import cosine_similarity

app = Flask(__name__)

# Configuration de la connexion à MongoDB
client = MongoClient('mongodb://localhost:27017/', replicaSet='<nom_du_replica_set>') # Remplacez <nom_du_replica_set> par le nom de votre replica set
db = client.nom_de_la_base_de_donnees # Remplacez nom_de_la_base_de_donnees par le nom de votre base de données

@app.route('/search_by_poster', methods=['POST'])
def search_by_poster():
    """
    Recherche des films similaires à une image donnée en comparant les embeddings.
    """
    try:
        # 1. Récupérer l'image depuis la requête POST
        image_file = request.files['image']
        # Exemple de traitement de l'image (à adapter selon votre méthode)
        # image = Image.open(BytesIO(image_file.read()))

        # 2. Générer l'embedding de l'image avec le modèle ResNet
        # (Vous devrez implémenter cette partie en utilisant votre modèle ResNet)
        # query_embedding = generate_embedding(image)
        # Exemple (remplacer par votre implémentation)
        query_embedding = np.random.rand(512)  # Vecteur aléatoire pour l'exemple

        # 3. Récupérer tous les embeddings des films depuis MongoDB
        movies = list(db.movies.find({}, {'_id': 1, 'embedding': 1}))

        # 4. Comparer l'embedding de l'image avec les embeddings des films
        # (Vous pouvez utiliser la similarité cosinus ou une autre métrique)
        # similarities = cosine_similarity([query_embedding], [movie['embedding'] for movie in movies])
        # Exemple (remplacer par votre implémentation)
        similarities = [np.dot(query_embedding, movie['embedding']) for movie in movies] # Produit scalaire pour l'exemple

        # 5. Récupérer les films les plus similaires
        # (Trier les films par similarité et récupérer les plus pertinents)
        similar_movies_indices = np.argsort(similarities)[::-1]  # Indices triés par similarité décroissante
        similar_movies = [movies[i] for i in similar_movies_indices]

        # 6. Récupérer les informations complètes des films similaires depuis MongoDB
        # (Vous pouvez récupérer les informations complètes en utilisant les IDs des films similaires)
        # Exemple :
        results = []
        for movie in similar_movies:
            full_movie_data = db.movies.find_one({'_id': movie['_id']})
            results.append(full_movie_data)

        return jsonify({'similar_movies': results}), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)

///////////////////////////////////////////////////


Explications du code :

    Imports :
        Flask : Pour créer l'API Flask.
        request : Pour gérer les requêtes HTTP.
        jsonify : Pour renvoyer des réponses JSON.
        pymongo : Pour interagir avec MongoDB.
        ObjectId : Pour gérer les IDs des documents MongoDB.
        numpy : Pour les opérations sur les vecteurs (embeddings).
        Autres imports nécessaires : Vous devrez peut-être ajouter d'autres imports pour le traitement des images (par exemple, PIL ou OpenCV) et pour la comparaison des embeddings (par exemple, scikit-learn pour la similarité cosinus).

    Connexion à MongoDB :
        client = MongoClient('mongodb://localhost:27017/', replicaSet='<nom_du_replica_set>') : Établit la connexion à MongoDB en spécifiant l'option replicaSet. Remplacez <nom_du_replica_set> par le nom de votre replica set.
        db = client.nom_de_la_base_de_donnees : Sélectionne la base de données à utiliser. Remplacez nom_de_la_base_de_donnees par le nom de votre base de données.

    Route /search_by_poster :
        @app.route('/search_by_poster', methods=['POST']) : Définit la route pour la recherche de films similaires, accessible via une requête POST.
        def search_by_poster(): : La fonction qui gère la logique de la recherche.

    Traitement de la requête :
        image_file = request.files['image'] : Récupère le fichier image envoyé dans la requête POST.
        # Exemple de traitement de l'image... : C'est ici que vous devrez implémenter le code pour traiter l'image (par exemple, l'ouvrir, la redimensionner, etc.) selon les exigences de votre modèle ResNet.
        # query_embedding = generate_embedding(image) : C'est ici que vous devrez implémenter l'appel à votre modèle ResNet pour générer l'embedding de l'image.
        query_embedding = np.random.rand(512) : Ceci est un exemple ! Remplacez-le par votre implémentation de la génération d'embedding. Le vecteur doit avoir la même dimensionnalité que les embeddings stockés dans la base de données (512 selon le document).

    Récupération des embeddings depuis MongoDB :
        movies = list(db.movies.find({}, {'_id': 1, 'embedding': 1})) : Récupère les IDs et les embeddings de tous les films depuis la collection movies. Seuls les champs _id et embedding sont récupérés pour optimiser la requête.

    Comparaison des embeddings :
        # similarities = cosine_similarity([query_embedding], [movie['embedding'] for movie in movies]) : Ceci est un exemple d'utilisation de la similarité cosinus (vous devrez peut-être installer scikit-learn). Vous pouvez utiliser d'autres métriques de distance ou de similarité selon vos besoins.
        similarities = [np.dot(query_embedding, movie['embedding']) for movie in movies] : Ceci est un exemple ! Remplacez-le par votre implémentation de la comparaison des embeddings. Cet exemple utilise le produit scalaire.

    Récupération des films similaires :
        similar_movies_indices = np.argsort(similarities)[::-1] : Trie les indices des films par similarité décroissante.
        similar_movies = [movies[i] for i in similar_movies_indices] : Récupère les films similaires en utilisant les indices triés.

    Récupération des informations complètes des films :
        # Exemple : ... : Ce code récupère les informations complètes de chaque film similaire depuis la base de données en utilisant son _id.

    Retour de la réponse :
        return jsonify({'similar_movies': results}), 200 : Renvoie les informations des films similaires au format JSON avec un code de statut 200 (OK).
        return jsonify({'error': str(e)}), 500 : Gère les exceptions et renvoie un message d'erreur au format JSON avec un code de statut 500 (Erreur interne du serveur).

Points importants à adapter :

    Connexion MongoDB : Remplacez les valeurs d'espace réservé pour l'URL de connexion, le nom du replica set et le nom de la base de données par les valeurs correctes pour votre configuration.
    Traitement de l'image : Implémentez le code pour traiter l'image reçue dans la requête POST selon les exigences de votre modèle ResNet.
    Génération de l'embedding : Implémentez l'appel à votre modèle ResNet pour générer l'embedding de l'image. Assurez-vous que l'embedding généré a la même dimensionnalité que les embeddings stockés dans la base de données.
    Comparaison des embeddings : Choisissez une métrique de distance ou de similarité appropriée pour comparer les embeddings. Implémentez le code pour calculer cette métrique.
    Gestion des erreurs : Adaptez la gestion des erreurs selon vos besoins.

Ce code fournit une base pour implémenter la recherche vectorielle de films similaires. Vous devrez l'adapter en fonction de votre modèle ResNet, de votre configuration MongoDB et de vos exigences spécifiques.
